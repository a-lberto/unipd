function [aji] = aIntGauss(z_i, r_i, h, k)
    % Coordinate punti elemento parente
    csi_i = [-1 1 1 -1];
    eta_i = [-1 -1 1 1];

    % Funzione di forma bidimensionale lineare
    Ni = @(csi, eta, i) 1/4*(1+csi_i(i)*csi)*(1+eta_i(i)*eta);
    
    % Derivate della funzione di forma
    dNidCsi = @(eta, i) 1/4*csi_i(i)*(1+eta_i(i)*eta);
    dNidEta = @(csi, i) 1/4*eta_i(i)*(1+csi_i(i)*csi);
    
    % Ricostruzione funzione interpolata dati i 4 nodi
    xCsiEta = @(csi, eta, x_i) Ni(csi, eta, 1)*x_i(1) + ...
                               Ni(csi, eta, 2)*x_i(2) + ...
                               Ni(csi, eta, 3)*x_i(3) + ...
                               Ni(csi, eta, 4)*x_i(4);
 
    % Derivata funzione generica rispetto a csi
    dxdCsi = @(eta, x_i)       dNidCsi(eta, 1)*x_i(1) + ...
                               dNidCsi(eta, 2)*x_i(2) + ...
                               dNidCsi(eta, 3)*x_i(3) + ...
                               dNidCsi(eta, 4)*x_i(4);

    % Derivata funzione generica rispetto a eta
    dxdEta = @(csi, x_i)       dNidEta(csi, 1)*x_i(1) + ...
                               dNidEta(csi, 2)*x_i(2) + ...
                               dNidEta(csi, 3)*x_i(3) + ...
                               dNidEta(csi, 4)*x_i(4);
    
    % Determinante della Jacobiana di trasformazione dell'elemento
    % isoparametrico al dominio dell'elemento parente
    detJ = @(csi, eta, z_i, r_i)        dxdCsi(eta, z_i)...
                                      * dxdEta(csi, r_i)...
                                      - dxdEta(csi, z_i)...
                                      * dxdCsi(eta, r_i);
    
    % Derivata rispetto a z della funzione generica
    dNidz = @(csi, eta, z_i, r_i, i)    dxdEta(csi, r_i)...
                                      * dNidCsi(eta, i) ...
                                      - dxdCsi(eta, r_i)...
                                      * dNidEta(csi, i) ...
                                      / detJ(csi, eta, z_i, r_i);

    % Derivata rispetto a r della funzione generica
    dNidr = @(csi, eta, z_i, r_i, i)    dxdEta(csi, z_i)...
                                      * dNidCsi(eta, i) ...
                                      - dxdCsi(eta, z_i)...
                                      * dNidEta(csi, i) ...
                                      / detJ(csi, eta, z_i, r_i);
 
    % Inizializzazione valore dell'integrale
    aji=0;
    
    % Quadratura di Gauss-Legendre
    xG=[-sqrt(3/5) 0 sqrt(3/5)];
    pG=[5/9 8/9 5/9];
    
    % Integrazione numerica coefficiente aji
    for i=1:length(xG)
        for j=1:length(xG)
            aji=aji ...
                + pG(i)*pG(j) ...
                / xCsiEta(xG(i),xG(j), r_i) ... 
                * ( ...
                    dNidz(xG(i), xG(j), z_i, r_i, h)...
                  * dNidz(xG(i), xG(j), z_i, r_i, k)...
                  + dNidr(xG(i), xG(j), z_i, r_i, h)...
                  * dNidr(xG(i), xG(j), z_i, r_i, k) ...
                  ) ...
                * detJ(xG(i), xG(j), z_i, r_i);
        end
    end
end